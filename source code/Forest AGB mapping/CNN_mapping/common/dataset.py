# -*- coding: utf-8 -*-
"""dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yt6-D8uHleFcae0ov_jjYfzU7WYzW0nl
"""



from scipy import interpolate
import random
import os
import os.path
import h5py
import cv2
import glob
import numpy as np
import torch
import torch.utils.data as udata
#from utilities import Im2Patch

class HyperDataset(udata.Dataset):
    def __init__(self,path,set_type,hsi_sign):

        self.path = path
        self.set_type = set_type
        with open(os.path.join(self.path,self.set_type+'.txt')) as f:
            self.keys = f.read().splitlines()

        random.shuffle(self.keys)
        # self.keys.sort()
        self.hsi_sign = hsi_sign

    def __len__(self):
        return len(self.keys)

    def __getitem__(self, index):
        mat = h5py.File(os.path.join(self.path,'Data',self.keys[index]+'.mat'), 'r')

        if self.hsi_sign == 'rad':
          hyper = np.float32(np.array(mat[self.hsi_sign]))
          hyper = np.clip(hyper, 0, 2**14)/2**14
          #hyper[hyper==0] = np.mean(hyper)
          hyper = np.transpose(hyper, [2, 0, 1])
          hyper = torch.Tensor(hyper)
        if self.hsi_sign == 'ref':  
          hyper = np.float32(np.array(mat[self.hsi_sign]))
          hyper = np.clip(hyper, 0, 100)/100
          #hyper[hyper==0] = np.mean(hyper)
          hyper = np.transpose(hyper, [2, 0, 1])
          hyper = torch.Tensor(hyper)

        rgb = np.float32(np.array(mat['rgb']))/255
        #rgb[rgb==0] = np.mean(rgb)
        rgb = np.transpose(rgb, [2, 0, 1])
        rgb = torch.Tensor(rgb)
        mat.close()
        return rgb, hyper



